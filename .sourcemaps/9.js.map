{"version":3,"sources":["../../src/pages/reset-password/reset-password.module.ts","../../src/shared/validators/email.validator.ts","../../src/pages/reset-password/reset-password.ts"],"names":[],"mappings":"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","file":"9.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ResetPasswordPage } from './reset-password';\n\n@NgModule({\n  declarations: [ResetPasswordPage],\n  imports: [IonicPageModule.forChild(ResetPasswordPage)],\n})\nexport class ResetPasswordPageModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.module.ts","import { FormControl } from '@angular/forms';\n\nexport class EmailValidator {\n\n  static isValid(control: FormControl){\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(control.value);\n    if (re){\n      return null;\n    }\n    return {\"invalidEmail\": true};\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/shared/validators/email.validator.ts","import { IonicPage, NavController, AlertController } from 'ionic-angular';\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthData } from '../../providers/auth-data';\nimport { EmailValidator } from '../../shared/validators/email.validator';\n\n@IonicPage()\n@Component({\n  selector: 'page-reset-password',\n  templateUrl: 'reset-password.html',\n})\nexport class ResetPasswordPage {\n\n  public resetPasswordForm;\n  emailChanged: boolean = false;\n  passwordChanged: boolean = false;\n  submitAttempt: boolean = false;\n\n\n  constructor(\n    public authData: AuthData,\n    public formBuilder: FormBuilder,\n    public navCtrl: NavController,\n    public alertCtrl: AlertController\n  ) {\n\n    this.resetPasswordForm = formBuilder.group({\n      email: ['', Validators.compose([Validators.required, EmailValidator.isValid])],\n    })\n  }\n\n  /**\n   * Receives an input field and sets the corresponding fieldChanged property to 'true' to help with the styles.\n   */\n  elementChanged(input){\n    let field = input.inputControl.name;\n    this[field + \"Changed\"] = true;\n  }\n\n  /**\n   * If the form is valid it will call the AuthData service to reset the user's password displaying a loading\n   *  component while the user waits.\n   *\n   * If the form is invalid it will just log the form value, feel free to handle that as you like.\n   */\n  resetPassword(){\n    this.submitAttempt = true;\n\n    if (!this.resetPasswordForm.valid){\n      console.log(this.resetPasswordForm.value);\n    } else {\n      this.authData.resetPassword(this.resetPasswordForm.value.email).then((user) => {\n        let alert = this.alertCtrl.create({\n          message: \"We just sent you a reset link to your email\",\n          buttons: [\n            {\n              text: \"Ok\",\n              role: 'cancel',\n              handler: () => {\n                this.navCtrl.pop();\n              }\n            }\n          ]\n        });\n        alert.present();\n      }, (error) => {\n        var errorMessage: string = error.message;\n        let errorAlert = this.alertCtrl.create({\n          message: errorMessage,\n          buttons: [\n            {\n              text: \"Ok\",\n              role: 'cancel'\n            }\n          ]\n        });\n        errorAlert.present();\n      });\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.ts"],"sourceRoot":""}